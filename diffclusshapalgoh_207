10c10
<  * \version $Id: ClusterShapeAlgo.h,v 1.16 2007/08/07 12:13:30 rahatlou Exp $
---
>  * \version $Id: ClusterShapeAlgo.h,v 1.15 2007/05/10 21:10:47 tsirig Exp $
29,35d28
< struct EcalClusterEnergyDeposition
< { 
<   double deposited_energy;
<   double r;
<   double phi;
< };
< 
45,47c38,44
<                                const CaloSubdetectorTopology* topology);
< 
<   private:
---
>                                const CaloSubdetectorTopology* topology,
> 			       const double K_value = 4.2);
>   
>  private:
>   void SetVariables(reco::ClusterShape &clusterShape);
>   // Setta il valore della costante K che entra nella definizione dei pesi logaritmici
>   void SetKValue(const double K_value);  
62a60,65
>   // Calcola le variabili di Cluster Shape
>   void Calculate_2D_Covariances(const reco::BasicCluster &passedCluster,
>                                 const EcalRecHitCollection* hits,
>                                 const int weighting);
>   // Calcola il Fisher
>   void Calculate_Fisher(const reco::BasicCluster &passedCluster);
65,88d67
<   // defines a energy deposition topology in a reference system centered on the cluster
<   void Calculate_EnergyDepTopology(const reco::BasicCluster &passedCluster,const EcalRecHitCollection *hits, const CaloSubdetectorGeometry * geometry, bool logW=true);
<   void Calculate_Polynomials(double rho);
<   double factorial(int n) const;
<   void Calculate_lat(const reco::BasicCluster &passedCluster);
<   void Calculate_ComplexZernikeMoments(const reco::BasicCluster &passedCluster);
<   // explicit implementation of polynomial part of
<   // Zernike-Functions for n<=5;
<   double f00(double r);
<   double f11(double r);
<   double f20(double r);
<   double f22(double r);
<   double f31(double r);
<   double f33(double r);
<   double f40(double r);
<   double f42(double r);
<   double f44(double r);
<   double f51(double r);
<   double f53(double r);
<   double f55(double r);
<   double absZernikeMoment(const reco::BasicCluster &passedCluster, int n, int m, double R0=6.6);
<   double fast_AbsZernikeMoment(const reco::BasicCluster &passedCluster, int n, int m, double R0);
<   // Calculation of Zernike-Moments for general values of (n,m)
<   double calc_AbsZernikeMoment(const reco::BasicCluster &passedCluster, int n, int m, double R0);
94c73,74
< 
---
>   
>   double K_;
99,102c79,87
<   double lat_;
<   double etaLat_ ;
<   double phiLat_ ;
<   double A20_, A42_;
---
>   Double32_t sEtaEta_, sEtaPhi_, sPhiPhi_;
>   Double32_t sRR_, sMajMaj_, sMajMajMaj_, sMajMajMajMaj_, sMinMin_;
>   Double32_t s_alpha_;
>   Double32_t displacement_, fisher_;
> 
>   Double32_t sEtaEtaEnergy_, sEtaPhiEnergy_, sPhiPhiEnergy_;
>   Double32_t sRREnergy_, sMajMajEnergy_, sMajMajMajEnergy_, sMajMajMajMajEnergy_, sMinMinEnergy_;
>   Double32_t s_alphaEnergy_;
>   Double32_t displacementEnergy_;
106,107d90
<   std::vector<EcalClusterEnergyDeposition> energyDistribution_;
<   std::vector<double> fcn_;
109a93
>   enum { LOG, ENERGY };
